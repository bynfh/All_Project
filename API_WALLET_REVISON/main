import asyncio
import aiohttp
import argparse
import logging
import json
import requests
import time
from aiohttp import web
import pprint
#################################LOG################################
logging.basicConfig(filename='Api_wallet.log',
                    format='%(asctime)s %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO,
                    datefmt='%m/%d/%Y %I:%M:%S %p',
                    filemode='w'
                    )
logger = logging.getLogger('Api_wallet')
##############################ARGPARSE##############################
parser = argparse.ArgumentParser(description='API_Wallet')
parser.add_argument('--period', default=1, type=int,
                    help='How many times per minute, default = 1')
parser.add_argument('--rub', default=0, type=int,
                    help='Value is rubles, default = 0')
parser.add_argument('--usd', default=0, type=int,
                    help='Value is usds, default = 0')
parser.add_argument('--eur', default=0, type=int,
                    help='Value is eurs, default = 0')
args = parser.parse_args()
logger.info('You cash:EUR = {EUR}, USD = {USD}, RUB = {RUB}, period = {period}'.format(EUR = args.eur,
                                                                                       USD = args.usd,
                                                                                       RUB = args.rub,
                                                                                       period = args.period))

##############################CONSTANT##############################
table = {}
URL = 'https://www.cbr-xml-daily.ru/daily_json.js'
TimesPerMinute = args.period * 60
##############################Functions#############################
async def get_data_about_course(session,url):
    logger.error('RUN get_data_about_course')
    while True:
        async with session.get(url) as response:
            try:
                data = await response.read()
                json_response = json.loads(data)
            except Exception as error:
                logging.error('Error in receiving the exchange rate.'
                              'Error description from interpreter:{error}'.format(error=error))
        if isinstance(json_response, dict) and json_response != {}:
            try:
                for valuteX in json_response['Valute']:
                    table['RUB' + '-' + valuteX] = 1 / json_response['Valute'][valuteX]['Value']
                    table[valuteX + '-' + 'RUB'] = json_response['Valute'][valuteX]['Value']
                    for valuteY in json_response['Valute']:
                        table[valuteX + '-' + valuteY] = json_response['Valute'][valuteX]['Value'] \
                                                         / json_response['Valute'][valuteY]['Value']
            except Exception as error:
                logging.error('Error in receiving the exchange rate.'
                              'Error description from interpreter:{error}'.format(error=error))
            response.close()
        await asyncio.sleep(TimesPerMinute)

async def test_print():
    while True:
        response = requests.get(URL)
        Course_EUR = 'Hello'
        Course_USD = 'World!!!'
        print (f"{Course_EUR} {Course_USD}".format(Course_EUR=Course_EUR,
                                                   Course_USD=Course_USD))
        await asyncio.sleep(5)

async def main(loop):
    urls = ["https://www.cbr-xml-daily.ru/daily_json.js"]
    async with aiohttp.ClientSession(loop=loop) as session:
        tasks = [get_data_about_course(session, url) for url in urls]
        await asyncio.gather(*tasks)

if __name__=="__main__":
    logger.info('RUN main block')
    loop = asyncio.get_event_loop()
    tasks = [
            loop.create_task(main(loop)),
            loop.create_task(test_print()),
            ]
    loop.run_until_complete(asyncio.wait(tasks))
    loop.close()






