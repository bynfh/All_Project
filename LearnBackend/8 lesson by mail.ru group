Web-технологии. Архитектура frontend backend | Технострим

Общая архитектура
frontend-backend
Клиенты - это броузеры, любой веб клиент. Клиент соездиняется с frontend сервером(nginx)
Он определяет с каким типом запрос к нему пришел. Если пришел со стат. документом(картинкой, java script file)
то сразу отдается ответ с диска. Если допустим пришел запрос html странички. Передается запрос к backend. Backend
возможно обращается к БД.
application server -где выполняется бизнес логика приложения

Задачи Frontend сервера
отдача статических документов
Проксирование(Передача запросов на backedn сервера)
Балансировка нагрузки(Выбирает backend server)
Кеширование(для снижения запросов к BACK)
Сборка SSI(Из небольших кусочков собирается страничка)
Аторизация, SSL, нарезка картинок,gzip

reverse proxy
Позволяет бороться с медленными клиентами
frontend(slow) читает запрос от клиента
frontend(fast) передает запрос свободному back
backend генерирует страницу
backend(slow) возвращает ответ frontend серверу
frontend(slow) возвращает ответ клиенту
Результат: back занят минимально возможное время

Backen(application) сервер
Роль application сервера заключается в исполнении бизнес логики приложения.
Протоколы запуска приложения
Servlets и др. специализированное API
mod_perl,mod_python,mod_php
CGI
FastCGI
SCGI
PSGI(perl),WSGI(python),Rack(ruby)

CGI
Метод, QueryString, заголовки запроса - Через переменные окружения
Тело запрос передается через STDIN
ЗАголовки и тело ответа возвращаются через STDOUT
HTTP код ответа передается через псевдоблок status
поток ошибок stderr напрявляется в лог ошибок сервера
У CGI есть недостаток долго, если на python так как это интерпритируемый язык. (На каждый http запрос происходит
запуск программы)
request_method - метод запроса get, post
path_info - путь передается
query_string - фрагмент URL после ?
remote_addr - IP адрес пользователя
content_length - длина тела запроса
Http_cokie - заголовок cokie