9. Web-технологии. MVC фреймворки | Технострим
Запросы динамических документов (html страницы, они генерятся налету)
Отправка форм
AJAX -запросы
Запоросы к api сайта

Основные задачи
Маршрутизация URL
Парсинг зкаголовков и параметров запроса
Хранение состояни  пользователя
Выполнение бизнес логики
Работа с базами данных
генерация html страницы ил json ответа

Используются фреймворки. MVC
model view controller
этот паттерн говорит из каких частей состоит приложение и как они должны взаимодействовать
Router - это декларативное описание, какой url должен приводить к какой функции.
Controller - это точка входа в веб приложение( их скорее всего несколько)
Делает вызовы к модели, модель возвращает контроллеру данные для отображения.
Контроллер передает во view, view по имеющимся данным генерит html,xml или что-то другое
model - реализует бизнес - логику(К БД, к внешним сервисам)

Плюсы фреймворков
+Готовая архитектура проекта
+Повторная использование кода
+Экономия ресурсов
+Участие в open source
+Проще найти программистов
+Проще обучать программистов

DJANGO
model - model
Router - urls.py
Controller - views
View - templates

Структура проекта
django-admin startproject NAME_PROJECT
создается проект и в нем приложение.
В джанго нестолько urls.py
manage.py - вызывается из консоли по поддержанию и изменению приложения
Проект с использоанием джанго расделяется на приложения.
Приложения это способ разделения кода.

Конфигурация django
Конфиг - просто pyhton модуь
#project/project/settings.py
ROOT_URLCONF = 'project.urls'
DATABASES = {
    'default' : {
        'engine' : 'django.db.backend.sqlite3',
        'name' : os.path.join(base_dir,'db.sqlite3'),
    }
  }
  Templete_DIRS = (Base_dir + '/templates',
  )
Приложение должно умет ьработать из разных приложений
1) Можно использовать абсолютные пути в каждом конфиге(плохой вариант, плохо работает с VCS)
2) Использовать переменн окружения $project_PATH
3) Относительные пути( отноисительно того, где находится проект

относительные пути
import os.path
base_dir = os.path.abspath(__file__)
base_dir = os.path.dirname(base_dir)
base_dir = os.path.dirname(base_dir)
Template_dirs = (
    base_dir + '/templates',
    )
    static_root = base-dir + '/root'
паттерн local_settings.py

Маршрутизация url
Обработка http запроса. Обработка файла urls.py
Начинается поиск с файла, который указан в  ROOT_URLCONF
django перебирает все urlpatterns, если совпадений не найдено, то возврат 404
Маргрутизация в проекте
urlpatterns = [
    url(r'^$', 'blog.views.home', name = 'home'),
    url(r'^',include('blog.urls'))m
    ]
url = для передачи именованных параметров
patterns - для добавления префикса к имени
include - включение одного urls.py внутрь другого(образуется дерево)

Особенности маршрутизации в django
/ в начале роутов не указывается
Можно указывать как имя так и саму view функцию
Роуты описываются с помощью регулярных выражений
Маршруты можно разделить по отдельным приложениям
Одно действие - один роут - один контроллер
