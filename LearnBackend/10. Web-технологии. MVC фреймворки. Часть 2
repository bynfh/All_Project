10. Web-технологии. MVC фреймворки. Часть 2 | Технострим
Django views
views.py
Контроллеры в django - это обычные функции, которые request response

# /blog/post_text/?id=123
def post_text(request):
    try:
        id = request.GET.get('id')
        obj = Post.objects.get(pk=id)
    except Post.DoesNotExist:
        raise Http404
    return HttpResponse (obj.text,
             content_type = 'text/plain')
Захват парамтров из URL
#blog/urls.py
url(r'^category/(\d+)/$', 'category_view')
url(r'^(?<pk>\d+)/$', 'post_detail')

Декораторы
Декаратор - функция, преобразующая одну функцию в другую
def double_it(func):
    def tmp(*args):
        return func(*args) * 2\
return tmp

@double_it
def mult(a,b):
    return(a*b)
сначада нужно ипортировать декоратор from django.views.decorators.http import require_POSt
@require_POST
def like(request):
    pass
@login_required
@crsf_exempt -откулючить проверку csrf

Шаблонизация
правильный подход - разделение данных и представления
Синтаксис шаблонов
<html>
    <head>...</head>
    <body>
        <p>{{ post.text }}</p>
    <body>
<html>

вызов шаблона
from django.shortcuts import render, render_to_response
return render_to_response('blog/post_details.html',{
    'post': post,
    'comments' : comments,
    })
return render(request, 'blog/post_details.html', {
    'post': post,
    'comments' : comments
    })

context processors
Это функции которые вызываются перед отрисовкой шаблона и могут добавить данных в контекст
тест branch ubuntu desktop


